{"uid":"b807f5d07787df19","name":"End-to-End Test: Multi-Order Routing and Delivery Flow","fullName":"tests.e2e.test_delivery_couier_flow.TestDeliveryCourierFlow#test_multiple_deliveries_routing_flow","historyId":"92f789503f2818e0bc97368088a188d6","time":{"start":1742844443624,"stop":1742845129245,"duration":685621},"description":"\n        Проверка полного цикла маршрутизации и выполнения нескольких доставок:\n        - Создание нескольких заказов.\n        - Включение смены курьера.\n        - Назначение курьера на все заказы.\n        - Выполнение доставки для каждого заказа.\n        - Проверка маршрута курьера на корректность данных и финальный статус.\n        ","descriptionHtml":"<pre><code>    Проверка полного цикла маршрутизации и выполнения нескольких доставок:\n    - Создание нескольких заказов.\n    - Включение смены курьера.\n    - Назначение курьера на все заказы.\n    - Выполнение доставки для каждого заказа.\n    - Проверка маршрута курьера на корректность данных и финальный статус.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <test_delivery_couier_flow.TestDeliveryCourierFlow object at 0x000001D790717E50>, timer = None\nget_test_name = 'tests/e2e/test_delivery_couier_flow.py::TestDeliveryCourierFlow::test_multiple_deliveries_routing_flow (setup)'\nlogistician_saas_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDUzNDQsInN1YiI6ImYwNDYwMzg1LTQ3MTUtNGQ1Mi05NDg5LTE3ZWMwZDAzODY4NiJ9.otvI7RrP2zBC44x-JOiMF__KkLA7p9YRjQ9FmtQgVHw'}\ncourier_saas_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDUzNDQsInN1YiI6ImYwNDEwY2Q4LTJiMWUtNGIwYi05ZjBiLTViZWVmN2QxYTk5MyJ9.5qxJJVFQsdMrFnB1rPpGiZs35M8Ron78OBIlV79yeR0'}\ncourier_data = {'company_id': 'ac6d1196-3488-49b0-b670-8361bca1d8d6', 'pickup_point_id': '9f8896d7-3f85-4d8c-9d6e-e0b9c672cf9a'}\n\n    @allure.title(\"End-to-End Test: Multi-Order Routing and Delivery Flow\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_multiple_deliveries_routing_flow(\n        self,\n        timer,\n        get_test_name,\n        logistician_saas_auth_headers,\n        courier_saas_auth_headers,\n        courier_data,\n    ):\n        \"\"\"\n        Проверка полного цикла маршрутизации и выполнения нескольких доставок:\n        - Создание нескольких заказов.\n        - Включение смены курьера.\n        - Назначение курьера на все заказы.\n        - Выполнение доставки для каждого заказа.\n        - Проверка маршрута курьера на корректность данных и финальный статус.\n        \"\"\"\n        company_id = courier_data[\"company_id\"]\n        pickup_point_id = courier_data[\"pickup_point_id\"]\n        courier_id = self.auth_service.get_courier_id(courier_saas_auth_headers)\n        date = datetime.now().strftime(\"%Y-%m-%d\")\n    \n        # Генерация списка заказов\n        orders = generate_hardcoded_orders()\n    \n        # Загрузка маршрутов из файла\n        geo_updates_data = load_json(\"tests/e2e/config/geo_updates.json\")\n    \n        # Преобразование данных в список маршрутов для удобного доступа\n        geo_updates = [\n            geo_updates_data[\"first_order\"],\n            geo_updates_data[\"second_order\"],\n            geo_updates_data[\"third_order\"],\n        ]\n    \n        # Шаг 1: Создание заказов\n        order_ids = self.create_deliveries(\n            get_test_name,\n            company_id,\n            pickup_point_id,\n            orders,\n            logistician_saas_auth_headers,\n        )\n    \n        # Шаг 2: Включение смены для курьера\n        self.courier_service.turn_on_shift(\n            get_test_name, courier_id, pickup_point_id, logistician_saas_auth_headers\n        )\n    \n        # Шаг 3: Назначение курьера на заказы\n        self.assign_deliveries(\n            get_test_name, order_ids, courier_id, logistician_saas_auth_headers\n        )\n    \n        # Шаг 4: Обновление геопозиции курьера и выполнение заказов\n        for idx, order_id in enumerate(order_ids):\n            # geo_updates[idx] - список координат для текущего заказа\n            self.complete_order(\n                get_test_name,\n                courier_id,\n                courier_saas_auth_headers,\n                order_id,\n                geo_updates[idx],\n            )\n    \n        # Шаг 5: Проверяем статус маршрута\n        # Ждем 10 секунд перед началом проверки\n        time.sleep(10)\n    \n        # Пытаемся проверить статус маршрута до 3 раз\n        max_attempts = 3\n        for attempt in range(max_attempts):\n            print(f\"Checking route status. Attempt {attempt + 1}/{max_attempts}.\")\n            try:\n                self.route_service.get_route_status(\n                    get_test_name,\n                    company_id,\n                    courier_id,\n                    pickup_point_id,\n                    date,\n                    logistician_saas_auth_headers,\n                )\n                print(f\"Route status checked successfully on attempt {attempt + 1}.\")\n                break  # Если статус успешно проверен, выходим из цикла\n            except AssertionError as e:\n                # Если это не последняя попытка, ждем перед следующей проверкой\n                if attempt < max_attempts - 1:\n                    print(\n                        f\"Attempt {attempt + 1}/{max_attempts} to check route status failed. Error: {e}. \"\n                        f\"Retrying in 5 seconds...\"\n                    )\n                    time.sleep(5)\n                else:\n                    print(f\"All {max_attempts} attempts to check route status failed. Error: {e}.\")\n>                   raise e\n\ntests\\e2e\\test_delivery_couier_flow.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\e2e\\test_delivery_couier_flow.py:192: in test_multiple_deliveries_routing_flow\n    self.route_service.get_route_status(\nservices\\route_service.py:65: in get_route_status\n    self.assertions.assert_route_status(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nroute_id = 'e6d40f50-785f-4fe4-af29-05fcc9df3e8a', actual_courier_id = 'f0410cd8-2b1e-4b0b-9f0b-5beef7d1a993'\nexpected_courier_id = 'f0410cd8-2b1e-4b0b-9f0b-5beef7d1a993', actual_deliveries_count = 15, expected_deliveries_count = 15, actual_status = 'performing'\nexpected_status = 'closed', test_name = 'tests/e2e/test_delivery_couier_flow.py::TestDeliveryCourierFlow::test_multiple_deliveries_routing_flow (setup)'\n\n    @staticmethod\n    def assert_route_status(\n        route_id,\n        actual_courier_id,\n        expected_courier_id,\n        actual_deliveries_count,\n        expected_deliveries_count,\n        actual_status,\n        expected_status,\n        test_name\n    ):\n        \"\"\"\n        Проверяет корректность параметров маршрута.\n        \"\"\"\n        assert actual_courier_id == expected_courier_id, get_logger(test_name).error(\n            f\"Expected courier ID '{expected_courier_id}', but got '{actual_courier_id}' for route {route_id}.\"\n        )\n        assert actual_deliveries_count == expected_deliveries_count, get_logger(test_name).error(\n            f\"Expected deliveries count '{expected_deliveries_count}', but got '{actual_deliveries_count}' for route {route_id}.\"\n        )\n>       assert actual_status == expected_status, get_logger(test_name).error(\n            f\"Expected status '{expected_status}', but got '{actual_status}' for route {route_id}.\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:73: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742844406409,"stop":1742844406513,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"courier_data","time":{"start":1742844406513,"stop":1742844406513,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"timer","time":{"start":1742844443348,"stop":1742844443348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"auth_headers","time":{"start":1742844443348,"stop":1742844443348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"logistician_saas_auth_headers","time":{"start":1742844443348,"stop":1742844443525,"duration":177},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_test_name","time":{"start":1742844443348,"stop":1742844443348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"courier_saas_auth_headers","time":{"start":1742844443525,"stop":1742844443624,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        Проверка полного цикла маршрутизации и выполнения нескольких доставок:\n        - Создание нескольких заказов.\n        - Включение смены курьера.\n        - Назначение курьера на все заказы.\n        - Выполнение доставки для каждого заказа.\n        - Проверка маршрута курьера на корректность данных и финальный статус.\n        ","status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <test_delivery_couier_flow.TestDeliveryCourierFlow object at 0x000001D790717E50>, timer = None\nget_test_name = 'tests/e2e/test_delivery_couier_flow.py::TestDeliveryCourierFlow::test_multiple_deliveries_routing_flow (setup)'\nlogistician_saas_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDUzNDQsInN1YiI6ImYwNDYwMzg1LTQ3MTUtNGQ1Mi05NDg5LTE3ZWMwZDAzODY4NiJ9.otvI7RrP2zBC44x-JOiMF__KkLA7p9YRjQ9FmtQgVHw'}\ncourier_saas_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDUzNDQsInN1YiI6ImYwNDEwY2Q4LTJiMWUtNGIwYi05ZjBiLTViZWVmN2QxYTk5MyJ9.5qxJJVFQsdMrFnB1rPpGiZs35M8Ron78OBIlV79yeR0'}\ncourier_data = {'company_id': 'ac6d1196-3488-49b0-b670-8361bca1d8d6', 'pickup_point_id': '9f8896d7-3f85-4d8c-9d6e-e0b9c672cf9a'}\n\n    @allure.title(\"End-to-End Test: Multi-Order Routing and Delivery Flow\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_multiple_deliveries_routing_flow(\n        self,\n        timer,\n        get_test_name,\n        logistician_saas_auth_headers,\n        courier_saas_auth_headers,\n        courier_data,\n    ):\n        \"\"\"\n        Проверка полного цикла маршрутизации и выполнения нескольких доставок:\n        - Создание нескольких заказов.\n        - Включение смены курьера.\n        - Назначение курьера на все заказы.\n        - Выполнение доставки для каждого заказа.\n        - Проверка маршрута курьера на корректность данных и финальный статус.\n        \"\"\"\n        company_id = courier_data[\"company_id\"]\n        pickup_point_id = courier_data[\"pickup_point_id\"]\n        courier_id = self.auth_service.get_courier_id(courier_saas_auth_headers)\n        date = datetime.now().strftime(\"%Y-%m-%d\")\n    \n        # Генерация списка заказов\n        orders = generate_hardcoded_orders()\n    \n        # Загрузка маршрутов из файла\n        geo_updates_data = load_json(\"tests/e2e/config/geo_updates.json\")\n    \n        # Преобразование данных в список маршрутов для удобного доступа\n        geo_updates = [\n            geo_updates_data[\"first_order\"],\n            geo_updates_data[\"second_order\"],\n            geo_updates_data[\"third_order\"],\n        ]\n    \n        # Шаг 1: Создание заказов\n        order_ids = self.create_deliveries(\n            get_test_name,\n            company_id,\n            pickup_point_id,\n            orders,\n            logistician_saas_auth_headers,\n        )\n    \n        # Шаг 2: Включение смены для курьера\n        self.courier_service.turn_on_shift(\n            get_test_name, courier_id, pickup_point_id, logistician_saas_auth_headers\n        )\n    \n        # Шаг 3: Назначение курьера на заказы\n        self.assign_deliveries(\n            get_test_name, order_ids, courier_id, logistician_saas_auth_headers\n        )\n    \n        # Шаг 4: Обновление геопозиции курьера и выполнение заказов\n        for idx, order_id in enumerate(order_ids):\n            # geo_updates[idx] - список координат для текущего заказа\n            self.complete_order(\n                get_test_name,\n                courier_id,\n                courier_saas_auth_headers,\n                order_id,\n                geo_updates[idx],\n            )\n    \n        # Шаг 5: Проверяем статус маршрута\n        # Ждем 10 секунд перед началом проверки\n        time.sleep(10)\n    \n        # Пытаемся проверить статус маршрута до 3 раз\n        max_attempts = 3\n        for attempt in range(max_attempts):\n            print(f\"Checking route status. Attempt {attempt + 1}/{max_attempts}.\")\n            try:\n                self.route_service.get_route_status(\n                    get_test_name,\n                    company_id,\n                    courier_id,\n                    pickup_point_id,\n                    date,\n                    logistician_saas_auth_headers,\n                )\n                print(f\"Route status checked successfully on attempt {attempt + 1}.\")\n                break  # Если статус успешно проверен, выходим из цикла\n            except AssertionError as e:\n                # Если это не последняя попытка, ждем перед следующей проверкой\n                if attempt < max_attempts - 1:\n                    print(\n                        f\"Attempt {attempt + 1}/{max_attempts} to check route status failed. Error: {e}. \"\n                        f\"Retrying in 5 seconds...\"\n                    )\n                    time.sleep(5)\n                else:\n                    print(f\"All {max_attempts} attempts to check route status failed. Error: {e}.\")\n>                   raise e\n\ntests\\e2e\\test_delivery_couier_flow.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\e2e\\test_delivery_couier_flow.py:192: in test_multiple_deliveries_routing_flow\n    self.route_service.get_route_status(\nservices\\route_service.py:65: in get_route_status\n    self.assertions.assert_route_status(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nroute_id = 'e6d40f50-785f-4fe4-af29-05fcc9df3e8a', actual_courier_id = 'f0410cd8-2b1e-4b0b-9f0b-5beef7d1a993'\nexpected_courier_id = 'f0410cd8-2b1e-4b0b-9f0b-5beef7d1a993', actual_deliveries_count = 15, expected_deliveries_count = 15, actual_status = 'performing'\nexpected_status = 'closed', test_name = 'tests/e2e/test_delivery_couier_flow.py::TestDeliveryCourierFlow::test_multiple_deliveries_routing_flow (setup)'\n\n    @staticmethod\n    def assert_route_status(\n        route_id,\n        actual_courier_id,\n        expected_courier_id,\n        actual_deliveries_count,\n        expected_deliveries_count,\n        actual_status,\n        expected_status,\n        test_name\n    ):\n        \"\"\"\n        Проверяет корректность параметров маршрута.\n        \"\"\"\n        assert actual_courier_id == expected_courier_id, get_logger(test_name).error(\n            f\"Expected courier ID '{expected_courier_id}', but got '{actual_courier_id}' for route {route_id}.\"\n        )\n        assert actual_deliveries_count == expected_deliveries_count, get_logger(test_name).error(\n            f\"Expected deliveries count '{expected_deliveries_count}', but got '{actual_deliveries_count}' for route {route_id}.\"\n        )\n>       assert actual_status == expected_status, get_logger(test_name).error(\n            f\"Expected status '{expected_status}', but got '{actual_status}' for route {route_id}.\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:73: AssertionError","steps":[],"attachments":[{"uid":"39a98a6aa5fe9c96","name":"Request","source":"39a98a6aa5fe9c96.json","type":"application/json","size":503},{"uid":"5f1910af0b630ab5","name":"POST Response","source":"5f1910af0b630ab5.json","type":"application/json","size":2130},{"uid":"e9b93225dafc16c0","name":"Request","source":"e9b93225dafc16c0.json","type":"application/json","size":490},{"uid":"f9802994760a7b2a","name":"POST Response","source":"f9802994760a7b2a.json","type":"application/json","size":2118},{"uid":"abdce5eb82ceb7d1","name":"Request","source":"abdce5eb82ceb7d1.json","type":"application/json","size":516},{"uid":"efea09469ff0518c","name":"POST Response","source":"efea09469ff0518c.json","type":"application/json","size":2136},{"uid":"99565ccc6160ba63","name":"PATCH Response","source":"99565ccc6160ba63.json","type":"application/json","size":28},{"uid":"19fd1f58c702caa8","name":"PATCH Response","source":"19fd1f58c702caa8.json","type":"application/json","size":28},{"uid":"6cd1dd3e6918ef4b","name":"PATCH Response","source":"6cd1dd3e6918ef4b.json","type":"application/json","size":28},{"uid":"8a16bffa55e7c603","name":"PATCH Response","source":"8a16bffa55e7c603.json","type":"application/json","size":28},{"uid":"28d749c4c2a4128f","name":"PATCH Response","source":"28d749c4c2a4128f.json","type":"application/json","size":28},{"uid":"b9fea817b2b9ac5f","name":"PATCH Response","source":"b9fea817b2b9ac5f.json","type":"application/json","size":28},{"uid":"d3a109c6a9ed5f33","name":"PATCH Response","source":"d3a109c6a9ed5f33.json","type":"application/json","size":28},{"uid":"d7c7a10fe0582988","name":"PATCH Response","source":"d7c7a10fe0582988.json","type":"application/json","size":28},{"uid":"cf72452b1c670c21","name":"PATCH Response","source":"cf72452b1c670c21.json","type":"application/json","size":28},{"uid":"9debdb03ad02da37","name":"PATCH Response","source":"9debdb03ad02da37.json","type":"application/json","size":28},{"uid":"4f19cac851820fad","name":"PATCH Response","source":"4f19cac851820fad.json","type":"application/json","size":28},{"uid":"5f2494890d101330","name":"PATCH Response","source":"5f2494890d101330.json","type":"application/json","size":28},{"uid":"c99b26f08d18540d","name":"PATCH Response","source":"c99b26f08d18540d.json","type":"application/json","size":28},{"uid":"c7f591c054bde6d5","name":"PATCH Response","source":"c7f591c054bde6d5.json","type":"application/json","size":28},{"uid":"da46da3536be390b","name":"PATCH Response","source":"da46da3536be390b.json","type":"application/json","size":28},{"uid":"6348f7ec0dd23c84","name":"PATCH Response","source":"6348f7ec0dd23c84.json","type":"application/json","size":28},{"uid":"dd81d73f6ca3d1f","name":"PATCH Response","source":"dd81d73f6ca3d1f.json","type":"application/json","size":28},{"uid":"b6ca4c7cb5295282","name":"PATCH Response","source":"b6ca4c7cb5295282.json","type":"application/json","size":28},{"uid":"8aa8016f0ccf4eb4","name":"PATCH Response","source":"8aa8016f0ccf4eb4.json","type":"application/json","size":28},{"uid":"d4de2447186954d","name":"PATCH Response","source":"d4de2447186954d.json","type":"application/json","size":28},{"uid":"7e5bc1c42181811","name":"PATCH Response","source":"7e5bc1c42181811.json","type":"application/json","size":28},{"uid":"8a20096894f20235","name":"PATCH Response","source":"8a20096894f20235.json","type":"application/json","size":28},{"uid":"da230f92868c3dc3","name":"PATCH Response","source":"da230f92868c3dc3.json","type":"application/json","size":28},{"uid":"2b8ed6fae6fba144","name":"PATCH Response","source":"2b8ed6fae6fba144.json","type":"application/json","size":28},{"uid":"b10fad413f216962","name":"PATCH Response","source":"b10fad413f216962.json","type":"application/json","size":28},{"uid":"5059b05cbe924356","name":"PATCH Response","source":"5059b05cbe924356.json","type":"application/json","size":28},{"uid":"916ef3f92c11f6bb","name":"PATCH Response","source":"916ef3f92c11f6bb.json","type":"application/json","size":28},{"uid":"9dfd88ca67b64428","name":"PATCH Response","source":"9dfd88ca67b64428.json","type":"application/json","size":28},{"uid":"b418e5384fb52213","name":"PATCH Response","source":"b418e5384fb52213.json","type":"application/json","size":28},{"uid":"d455a3ff16d49d5e","name":"PATCH Response","source":"d455a3ff16d49d5e.json","type":"application/json","size":28},{"uid":"2ee9134bbe379fbb","name":"PATCH Response","source":"2ee9134bbe379fbb.json","type":"application/json","size":28},{"uid":"dc720a6d76fe50df","name":"PATCH Response","source":"dc720a6d76fe50df.json","type":"application/json","size":28},{"uid":"491e57df56a35b68","name":"PATCH Response","source":"491e57df56a35b68.json","type":"application/json","size":28},{"uid":"82d1ccfe7b8ed795","name":"PATCH Response","source":"82d1ccfe7b8ed795.json","type":"application/json","size":28},{"uid":"14acd7a22388f088","name":"PATCH Response","source":"14acd7a22388f088.json","type":"application/json","size":28},{"uid":"9c9eeaed017ef43","name":"PATCH Response","source":"9c9eeaed017ef43.json","type":"application/json","size":28},{"uid":"d1695ac6ccbdfffb","name":"PATCH Response","source":"d1695ac6ccbdfffb.json","type":"application/json","size":28},{"uid":"1de7950645315c39","name":"PATCH Response","source":"1de7950645315c39.json","type":"application/json","size":28},{"uid":"2e4c03d1b403818b","name":"PATCH Response","source":"2e4c03d1b403818b.json","type":"application/json","size":28},{"uid":"9009fbbc6f927918","name":"PATCH Response","source":"9009fbbc6f927918.json","type":"application/json","size":28},{"uid":"80aac249b3746eac","name":"PATCH Response","source":"80aac249b3746eac.json","type":"application/json","size":28},{"uid":"a499866ec06a6c9a","name":"PATCH Response","source":"a499866ec06a6c9a.json","type":"application/json","size":28},{"uid":"c7dd65fc4f08bbd5","name":"PATCH Response","source":"c7dd65fc4f08bbd5.json","type":"application/json","size":28},{"uid":"61c1e4bb7520d1d6","name":"PATCH Response","source":"61c1e4bb7520d1d6.json","type":"application/json","size":28},{"uid":"5fedcc86b3647777","name":"PATCH Response","source":"5fedcc86b3647777.json","type":"application/json","size":28},{"uid":"127a50a85d829412","name":"PATCH Response","source":"127a50a85d829412.json","type":"application/json","size":28},{"uid":"81dcc654af034b59","name":"PATCH Response","source":"81dcc654af034b59.json","type":"application/json","size":28},{"uid":"27a5ef2f65873e18","name":"PATCH Response","source":"27a5ef2f65873e18.json","type":"application/json","size":28},{"uid":"cfaad3bf5b8b7526","name":"PATCH Response","source":"cfaad3bf5b8b7526.json","type":"application/json","size":28},{"uid":"f7a0d5a439c2597d","name":"PATCH Response","source":"f7a0d5a439c2597d.json","type":"application/json","size":28},{"uid":"fb43a2f42f80c60d","name":"PATCH Response","source":"fb43a2f42f80c60d.json","type":"application/json","size":28},{"uid":"74f300bbdaa9d33d","name":"PATCH Response","source":"74f300bbdaa9d33d.json","type":"application/json","size":28},{"uid":"5972a077644434af","name":"GET Response","source":"5972a077644434af.json","type":"application/json","size":2202},{"uid":"1dab1f28f2d1233b","name":"GET Response","source":"1dab1f28f2d1233b.json","type":"application/json","size":2202},{"uid":"6215ba3673465248","name":"GET Response","source":"6215ba3673465248.json","type":"application/json","size":2202},{"uid":"e18e72a1a76ceb2d","name":"log","source":"e18e72a1a76ceb2d.txt","type":"text/plain","size":734}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":62},"afterStages":[{"name":"timer::0","time":{"start":1742845129734,"stop":1742845129743,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"epic","value":"Testing delivery creation, delivery assignment and delivery completion by courier for SAAS company"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"tests.e2e"},{"name":"suite","value":"test_delivery_couier_flow"},{"name":"subSuite","value":"TestDeliveryCourierFlow"},{"name":"host","value":"DESKTOP-7NMG6HA"},{"name":"thread","value":"13480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.e2e.test_delivery_couier_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b807f5d07787df19.json","parameterValues":[]}