{"uid":"568167e66a9d4696","name":"Get company by invalid id","fullName":"tests.test_company.test_get_company_by_id.TestGetCompanyById#test_get_company_by_invalid_id","historyId":"1bebb9c20bc90af5f70eb5d5a5c59e2e","time":{"start":1742845145236,"stop":1742845145585,"duration":349},"status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <tests.test_company.test_get_company_by_id.TestGetCompanyById object at 0x000001D7907150C0>\nget_test_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\nadmin_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDYwNDYsInN1YiI6IjZhNDczYWJiLTQ3NjAtNGM0ZC05YmQxLWU4ZmI2ZTRlZjI1OSJ9.dp6IKhD9BKI2-IyNfSQpJyx81SH1pHiW_tC4vhvZB6g'}\ninvalid_id = ''\n\n    @allure.title(\"Get company by invalid id\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"invalid_id\",\n        [\n            \"\",  # Пустая строка\n            \"12345\",  # Неправильный формат\n            \"invalid-uuid\",  # Неправильный UUID\n            \"non-existent-id\",  # Несуществующий UUID\n        ],\n    )\n    def test_get_company_by_invalid_id(self, get_test_name, admin_auth_headers, invalid_id):\n        response = self.request.get(\n            url=f\"{self.url.list_of_companies}/{invalid_id}\",\n            headers=admin_auth_headers,\n        )\n        # print(response.text)\n>       self.assertions.assert_status_code(\n            response=response,\n            expected_status_code=HTTPStatus.BAD_REQUEST,\n            test_name=get_test_name,\n        )\n\ntests\\test_company\\test_get_company_by_id.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [301 Moved Permanently]>, expected_status_code = <HTTPStatus.BAD_REQUEST: 400>\ntest_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int, test_name: str):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, get_logger(test_name).error(\n            f\"Expected {expected_status_code} status code but got {actual_status_code} status code instead\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742844406409,"stop":1742844406513,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"admin_auth_headers","time":{"start":1742845144865,"stop":1742845145236,"duration":371},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_test_name","time":{"start":1742845144865,"stop":1742845144865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"auth_headers","time":{"start":1742845144865,"stop":1742845144865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <tests.test_company.test_get_company_by_id.TestGetCompanyById object at 0x000001D7907150C0>\nget_test_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\nadmin_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDYwNDYsInN1YiI6IjZhNDczYWJiLTQ3NjAtNGM0ZC05YmQxLWU4ZmI2ZTRlZjI1OSJ9.dp6IKhD9BKI2-IyNfSQpJyx81SH1pHiW_tC4vhvZB6g'}\ninvalid_id = ''\n\n    @allure.title(\"Get company by invalid id\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"invalid_id\",\n        [\n            \"\",  # Пустая строка\n            \"12345\",  # Неправильный формат\n            \"invalid-uuid\",  # Неправильный UUID\n            \"non-existent-id\",  # Несуществующий UUID\n        ],\n    )\n    def test_get_company_by_invalid_id(self, get_test_name, admin_auth_headers, invalid_id):\n        response = self.request.get(\n            url=f\"{self.url.list_of_companies}/{invalid_id}\",\n            headers=admin_auth_headers,\n        )\n        # print(response.text)\n>       self.assertions.assert_status_code(\n            response=response,\n            expected_status_code=HTTPStatus.BAD_REQUEST,\n            test_name=get_test_name,\n        )\n\ntests\\test_company\\test_get_company_by_id.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [301 Moved Permanently]>, expected_status_code = <HTTPStatus.BAD_REQUEST: 400>\ntest_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int, test_name: str):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, get_logger(test_name).error(\n            f\"Expected {expected_status_code} status code but got {actual_status_code} status code instead\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:13: AssertionError","steps":[],"attachments":[{"uid":"b87c620c7bceb1ef","name":"GET Response","source":"b87c620c7bceb1ef.json","type":"application/json","size":2},{"uid":"66462a37de1c0cdb","name":"log","source":"66462a37de1c0cdb.txt","type":"text/plain","size":202}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"Testing get company by id"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"tests.test_company"},{"name":"suite","value":"test_get_company_by_id"},{"name":"subSuite","value":"TestGetCompanyById"},{"name":"host","value":"DESKTOP-7NMG6HA"},{"name":"thread","value":"13480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_company.test_get_company_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"invalid_id","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"568167e66a9d4696.json","parameterValues":["''"]}