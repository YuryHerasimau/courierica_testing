{"uid":"37df30d32062fe3c","name":"Get companies with pagination","fullName":"tests.test_company.test_get_companies.TestGetCompanies#test_pagination","historyId":"ef478bac2c4c993ea27d00130c00d83a","time":{"start":1742845136630,"stop":1742845136777,"duration":147},"status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <tests.test_company.test_get_companies.TestGetCompanies object at 0x000001D790716440>\nget_test_name = 'tests/test_company/test_get_companies.py::TestGetCompanies::test_pagination[-1-10-HTTPStatus.BAD_REQUEST] (setup)'\nadmin_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDYwMzcsInN1YiI6IjZhNDczYWJiLTQ3NjAtNGM0ZC05YmQxLWU4ZmI2ZTRlZjI1OSJ9.FIa0QykFqEeV-ElxxtKcMmwxUk7lZEafvB81jRyTIZs'}\npage = -1, per_page = 10, expected_status = <HTTPStatus.BAD_REQUEST: 400>, total_companies = 606\n\n    @allure.title(\"Get companies with pagination\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"page, per_page, expected_status\",\n        [\n            (1, 10, HTTPStatus.OK),\n            (1, 100, HTTPStatus.OK),\n            (50, 10, HTTPStatus.OK),\n            (1, 200, HTTPStatus.OK),\n            (0, 10, HTTPStatus.BAD_REQUEST),\n            (-1, 10, HTTPStatus.BAD_REQUEST),\n            (None, None, HTTPStatus.BAD_REQUEST),\n            (\"abc\", 10, HTTPStatus.BAD_REQUEST),\n            (1, \"xyz\", HTTPStatus.BAD_REQUEST),\n        ],\n    )\n    def test_pagination(\n        self,\n        get_test_name,\n        admin_auth_headers,\n        page,\n        per_page,\n        expected_status,\n        total_companies,\n    ):\n        response = self.request.get(\n            url=f\"{self.url.list_of_companies}?page={page}&per_page={per_page}\",\n            headers=admin_auth_headers,\n        )\n>       self.assertions.assert_status_code(\n            response=response,\n            expected_status_code=expected_status,\n            test_name=get_test_name,\n        )\n\ntests\\test_company\\test_get_companies.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500 Internal Server Error]>, expected_status_code = <HTTPStatus.BAD_REQUEST: 400>\ntest_name = 'tests/test_company/test_get_companies.py::TestGetCompanies::test_pagination[-1-10-HTTPStatus.BAD_REQUEST] (setup)'\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int, test_name: str):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, get_logger(test_name).error(\n            f\"Expected {expected_status_code} status code but got {actual_status_code} status code instead\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742844406409,"stop":1742844406513,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"auth_headers","time":{"start":1742845136071,"stop":1742845136071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"admin_auth_headers","time":{"start":1742845136071,"stop":1742845136337,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_test_name","time":{"start":1742845136071,"stop":1742845136071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"total_companies","time":{"start":1742845136337,"stop":1742845136630,"duration":293},"status":"passed","steps":[],"attachments":[{"uid":"e9332d0d5e4fea36","name":"GET Response","source":"e9332d0d5e4fea36.json","type":"application/json","size":15991}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: None","statusTrace":"self = <tests.test_company.test_get_companies.TestGetCompanies object at 0x000001D790716440>\nget_test_name = 'tests/test_company/test_get_companies.py::TestGetCompanies::test_pagination[-1-10-HTTPStatus.BAD_REQUEST] (setup)'\nadmin_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDYwMzcsInN1YiI6IjZhNDczYWJiLTQ3NjAtNGM0ZC05YmQxLWU4ZmI2ZTRlZjI1OSJ9.FIa0QykFqEeV-ElxxtKcMmwxUk7lZEafvB81jRyTIZs'}\npage = -1, per_page = 10, expected_status = <HTTPStatus.BAD_REQUEST: 400>, total_companies = 606\n\n    @allure.title(\"Get companies with pagination\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"page, per_page, expected_status\",\n        [\n            (1, 10, HTTPStatus.OK),\n            (1, 100, HTTPStatus.OK),\n            (50, 10, HTTPStatus.OK),\n            (1, 200, HTTPStatus.OK),\n            (0, 10, HTTPStatus.BAD_REQUEST),\n            (-1, 10, HTTPStatus.BAD_REQUEST),\n            (None, None, HTTPStatus.BAD_REQUEST),\n            (\"abc\", 10, HTTPStatus.BAD_REQUEST),\n            (1, \"xyz\", HTTPStatus.BAD_REQUEST),\n        ],\n    )\n    def test_pagination(\n        self,\n        get_test_name,\n        admin_auth_headers,\n        page,\n        per_page,\n        expected_status,\n        total_companies,\n    ):\n        response = self.request.get(\n            url=f\"{self.url.list_of_companies}?page={page}&per_page={per_page}\",\n            headers=admin_auth_headers,\n        )\n>       self.assertions.assert_status_code(\n            response=response,\n            expected_status_code=expected_status,\n            test_name=get_test_name,\n        )\n\ntests\\test_company\\test_get_companies.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500 Internal Server Error]>, expected_status_code = <HTTPStatus.BAD_REQUEST: 400>\ntest_name = 'tests/test_company/test_get_companies.py::TestGetCompanies::test_pagination[-1-10-HTTPStatus.BAD_REQUEST] (setup)'\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int, test_name: str):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, get_logger(test_name).error(\n            f\"Expected {expected_status_code} status code but got {actual_status_code} status code instead\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:13: AssertionError","steps":[],"attachments":[{"uid":"59568e87d56b7ff7","name":"GET Response","source":"59568e87d56b7ff7.json","type":"application/json","size":42},{"uid":"9a00e86cb35eea46","name":"log","source":"9a00e86cb35eea46.txt","type":"text/plain","size":209}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"Testing get company list"},{"name":"parentSuite","value":"tests.test_company"},{"name":"suite","value":"test_get_companies"},{"name":"subSuite","value":"TestGetCompanies"},{"name":"host","value":"DESKTOP-7NMG6HA"},{"name":"thread","value":"13480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_company.test_get_companies"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"<HTTPStatus.BAD_REQUEST: 400>"},{"name":"page","value":"-1"},{"name":"per_page","value":"10"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"37df30d32062fe3c.json","parameterValues":["<HTTPStatus.BAD_REQUEST: 400>","-1","10"]}