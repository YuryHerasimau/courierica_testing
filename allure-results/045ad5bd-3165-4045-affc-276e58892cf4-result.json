{"name": "Get company by invalid id", "status": "failed", "statusDetails": {"message": "AssertionError: None", "trace": "self = <tests.test_company.test_get_company_by_id.TestGetCompanyById object at 0x000001D7907150C0>\nget_test_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\nadmin_auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI4NDYwNDYsInN1YiI6IjZhNDczYWJiLTQ3NjAtNGM0ZC05YmQxLWU4ZmI2ZTRlZjI1OSJ9.dp6IKhD9BKI2-IyNfSQpJyx81SH1pHiW_tC4vhvZB6g'}\ninvalid_id = ''\n\n    @allure.title(\"Get company by invalid id\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"invalid_id\",\n        [\n            \"\",  # Пустая строка\n            \"12345\",  # Неправильный формат\n            \"invalid-uuid\",  # Неправильный UUID\n            \"non-existent-id\",  # Несуществующий UUID\n        ],\n    )\n    def test_get_company_by_invalid_id(self, get_test_name, admin_auth_headers, invalid_id):\n        response = self.request.get(\n            url=f\"{self.url.list_of_companies}/{invalid_id}\",\n            headers=admin_auth_headers,\n        )\n        # print(response.text)\n>       self.assertions.assert_status_code(\n            response=response,\n            expected_status_code=HTTPStatus.BAD_REQUEST,\n            test_name=get_test_name,\n        )\n\ntests\\test_company\\test_get_company_by_id.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [301 Moved Permanently]>, expected_status_code = <HTTPStatus.BAD_REQUEST: 400>\ntest_name = 'tests/test_company/test_get_company_by_id.py::TestGetCompanyById::test_get_company_by_invalid_id[] (setup)'\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int, test_name: str):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, get_logger(test_name).error(\n            f\"Expected {expected_status_code} status code but got {actual_status_code} status code instead\"\n        )\nE       AssertionError: None\n\nsrc\\assertions.py:13: AssertionError"}, "attachments": [{"name": "GET Response", "source": "e5022b80-2c29-4f98-9f00-e8253661b4a8-attachment.json", "type": "application/json"}, {"name": "log", "source": "fe4322bd-e14c-4248-8b75-c092010504f4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "invalid_id", "value": "''"}], "start": 1742845145236, "stop": 1742845145585, "uuid": "ff5c494f-66ba-41dd-b06b-55ff692cd01d", "historyId": "1bebb9c20bc90af5f70eb5d5a5c59e2e", "testCaseId": "1bebb9c20bc90af5f70eb5d5a5c59e2e", "fullName": "tests.test_company.test_get_company_by_id.TestGetCompanyById#test_get_company_by_invalid_id", "labels": [{"name": "epic", "value": "Testing get company by id"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "tests.test_company"}, {"name": "suite", "value": "test_get_company_by_id"}, {"name": "subSuite", "value": "TestGetCompanyById"}, {"name": "host", "value": "DESKTOP-7NMG6HA"}, {"name": "thread", "value": "13480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_company.test_get_company_by_id"}]}